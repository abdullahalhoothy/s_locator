name: Deploy Dev

on:
  push:
    branches: [ dev ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual build and deploy'


jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.13']
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@master
      env:
        DEV_FIREBASE_SA: ${{ secrets.DEV_FIREBASE_SA }}
        DEV_SECRETS_GMAP: ${{ secrets.DEV_SECRETS_GMAP }}
        DEV_SECRETS_FIREBASE: ${{ secrets.DEV_SECRETS_FIREBASE }}
        FRONTEND_ENV: ${{ secrets.FRONTEND_ENV }}
        DEV_SECRET_DATABASE_ENV: ${{ secrets.DEV_SECRET_DATABASE_ENV }}
        DEV_GCLOUD_CONSOLE_SA: ${{ secrets.DEV_GCLOUD_CONSOLE_SA }}
        DEV_SECRET_STRIPE: ${{ secrets.DEV_SECRET_STRIPE }}
        DEV_SECRETS_LLM: ${{ secrets.DEV_SECRETS_LLM }}
        DEV_GITHUB_PAT: ${{ secrets.DEV_GITHUB_PAT }}
      with:
        host: '37.27.195.216'
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        envs: DEV_FIREBASE_SA,DEV_SECRETS_GMAP,DEV_SECRETS_FIREBASE,FRONTEND_ENV,DEV_SECRET_DATABASE_ENV, DEV_GCLOUD_CONSOLE_SA, DEV_SECRET_STRIPE, DEV_SECRETS_LLM, DEV_GITHUB_PAT
        script: |
          set -x  # Enable debug mode
          set -e  # Exit on error
          
          echo "Starting deployment process..."

          cd ..
          cd ..
          cd ..
          cd ..
          cd ..
          if [ -d "s_locator" ]; then
            cd s_locator
            docker compose down
            echo "Docker compose down completed."
            
            cd ..
            rm -rf s_locator
            echo "Removed existing s_locator directory."
          fi
          
          # Clone the repository and checkout subrepositories directly
          git config --global user.email "ci@example.com"
          git config --global user.name "Github actions"
          
          # Clone main repository
            git clone https://${{ secrets.DEV_GITHUB_PAT }}@github.com/abdullahalhoothy/s_locator.git
          cd s_locator

          rm -rf FrontEnd
          rm -rf my_middle_API

          # Clone backend repository directly
          git clone https://${{ secrets.DEV_GITHUB_PAT }}@github.com/abdullahalhoothy/backend2.git my_middle_API
          cd my_middle_API
          git checkout origin/dev
          cd ..

          # Clone s-locator-dash repository directly  
          git clone https://github.com/abdullahalhoothy/FrontEnd.git FrontEnd
          cd FrontEnd
          git checkout dev
          cd ..
          
          # Create secrets directory if it doesn't exist
          mkdir -p my_middle_API/secrets
          mkdir -p storage/secrets
          echo "Secret directories created."
          
          # Create secret files
          echo '${{ secrets.DEV_FIREBASE_SA }}' > my_middle_API/secrets/secret_dev-s-locator-SA.json
          echo '${{ secrets.DEV_SECRETS_GMAP }}' > my_middle_API/secrets/secrets_gmap.json
          echo '${{ secrets.DEV_SECRETS_FIREBASE }}' > my_middle_API/secrets/secrets_firebase.json
          echo '${{ secrets.DEV_SECRET_DATABASE_ENV }}' > storage/secrets/secrets_database.env
          echo '${{ secrets.FRONTEND_ENV }}' > FrontEnd/.env
          echo '${{ secrets.DEV_GCLOUD_CONSOLE_SA }}' > my_middle_API/secrets/ggl_bucket_sa.json
          echo '${{ secrets.DEV_SECRET_STRIPE }}' > my_middle_API/secrets/secret_stripe.json
          echo '${{ secrets.DEV_SECRETS_LLM }}' > my_middle_API/secrets/secrets_llm.json

          echo "Secret files created."
          
          # Replace values in files
          sed -i 's|"REACT_APP_API_URL": "http://localhost:8000/fastapi"|"REACT_APP_API_URL": "http://37.27.195.216:8000/fastapi"|g' FrontEnd/src/urls.json
          sed -i 's|enable_CORS_url: str = "http://localhost:3000"|enable_CORS_url: str = "http://37.27.195.216:3000"|g' my_middle_API/config_factory.py
          sed -i 's|uvicorn.run(app, host="localhost", port=8000)|uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)|g' my_middle_API/run_apps.py
          echo "Configuration files updated."
         
          # Install jq
          apt-get update && apt-get install -y jq
          echo "jq installed."
          
          # For Backup
          touch /backup.sh
          cp ./backup.sh /backup.sh
          chmod 777 backup_setup.sh
          ./backup_setup.sh
          echo "Backup setup completed."
          
          # Build and run Docker containers
          docker compose build
          echo "Docker compose build completed."
          
          docker compose up -d
          echo "Docker compose up completed."
          
          # Get container ID of backend container and install Google Cloud SDK
          BACKEND_CONTAINER_ID=$(docker ps | grep api | awk '{print $1}')
          echo "backend container ID: $BACKEND_CONTAINER_ID"

          # Retrieve population data on the container
          docker exec "$BACKEND_CONTAINER_ID" bash -c '
          # Clean up previous configuration first
          rm -f /etc/apt/sources.list.d/google-cloud-sdk.list
          rm -f /usr/share/keyrings/cloud.google.gpg

          # Install prerequisites
          apt-get update
          apt-get install -y curl gnupg apt-transport-https ca-certificates lsb-release

          # Add Google Cloud public key using the new method
          curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg

          # Add the Google Cloud SDK repository with signed-by option
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee /etc/apt/sources.list.d/google-cloud-sdk.list

          # Update and install Google Cloud SDK (with verbose output)
          echo "Running apt-get update..."
          apt-get update || { echo "Failed to update package list"; exit 1; }
          echo "Installing Google Cloud SDK..."
          apt-get install -y google-cloud-sdk || { echo "Failed to install Google Cloud SDK"; exit 1; }
          echo "Google Cloud SDK installation complete"

          # Create directory and download population_json_files files
          mkdir -p Backend/population_json_files/
          echo "Directory created. Now attempting to use gsutil..."
          which gsutil
          BASE_PATH="gs://dev-s-locator/postgreSQL/dbo_operational/raw_schema_marketplace/population/"
          echo "Getting LATEST_PATH..."
          LATEST_PATH=$(gsutil ls -d "${BASE_PATH}"* | sort -r | head -n1)
          echo "Most recent folder: $LATEST_PATH"
          echo "Copying files..."
          gsutil -m cp -r "$LATEST_PATH"* Backend/
          echo "Copy population_json_files complete"



          # Create directory and download area_income_geojson files
          mkdir -p Backend/area_income_geojson/
          echo "Directory created. Now attempting to use gsutil..."
          which gsutil
          BASE_PATH="gs://dev-s-locator/postgreSQL/dbo_operational/raw_schema_marketplace/interpolated_riyadh/"
          echo "Getting LATEST_PATH..."
          LATEST_PATH=$(gsutil ls -d "${BASE_PATH}"* | sort -r | head -n1)
          echo "Most recent folder: $LATEST_PATH"
          echo "Copying files..."
          gsutil -m cp -r "$LATEST_PATH"* Backend/
          echo "Copy area_income_geojson complete"
          '

          echo "Deployment process finished."
