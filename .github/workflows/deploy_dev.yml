name: Deploy Dev

on:
  push:
    branches: [ dev ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual build and deploy'


jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.13']
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@master
      env:
        DEV_FIREBASE_SA: ${{ secrets.DEV_FIREBASE_SA }}
        DEV_SECRETS_GMAP: ${{ secrets.DEV_SECRETS_GMAP }}
        DEV_SECRETS_FIREBASE: ${{ secrets.DEV_SECRETS_FIREBASE }}
        FRONTEND_ENV: ${{ secrets.FRONTEND_ENV }}
        DEV_SECRET_DATABASE_ENV: ${{ secrets.DEV_SECRET_DATABASE_ENV }}
        DEV_GCLOUD_CONSOLE_SA: ${{ secrets.DEV_GCLOUD_CONSOLE_SA }}
        DEV_SECRET_STRIPE: ${{ secrets.DEV_SECRET_STRIPE }}
        DEV_SECRETS_LLM: ${{ secrets.DEV_SECRETS_LLM }}
        DEV_GITHUB_PAT: ${{ secrets.DEV_GITHUB_PAT }}
      with:
        host: '37.27.195.216'
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        envs: DEV_FIREBASE_SA,DEV_SECRETS_GMAP,DEV_SECRETS_FIREBASE,FRONTEND_ENV,DEV_SECRET_DATABASE_ENV, DEV_GCLOUD_CONSOLE_SA, DEV_SECRET_STRIPE, DEV_SECRETS_LLM, DEV_GITHUB_PAT
        script: |
          set -x  # Enable debug mode
          set -e  # Exit on error
          
          echo "Starting deployment process..."

          cd ..
          cd ..
          cd ..
          cd ..
          cd ..
          if [ -d "s_locator" ]; then
            cd s_locator
            docker compose down
            echo "Docker compose down completed."
            
            cd ..
            rm -rf s_locator
            echo "Removed existing s_locator directory."
          fi
          
          # Clone main repository
            git clone https://${{ secrets.DEV_GITHUB_PAT }}@github.com/abdullahalhoothy/s_locator.git
          cd s_locator

          rm -rf FrontEnd
          rm -rf my_middle_API

          # Clone backend repository directly
          git clone https://${{ secrets.DEV_GITHUB_PAT }}@github.com/abdullahalhoothy/backend2.git my_middle_API
          cd my_middle_API
          git checkout origin/dev
          cd ..
          
          # # Clone scoring_apis package repository for shared algorithms
          # git clone https://${{ secrets.DEV_GITHUB_PAT }}@github.com/abdullahalhoothy/scoring_apis.git scoring_apis_repo
          # echo "Scoring APIs package repository cloned."

          # Clone s-locator-dash repository directly  
          git clone https://github.com/abdullahalhoothy/FrontEnd.git FrontEnd
          cd FrontEnd
          git checkout dev
          cd ..
          
          # Create secrets directory if it doesn't exist
          mkdir -p my_middle_API/secrets
          mkdir -p storage/secrets
          echo "Secret directories created."
          
          # Create secret files
          echo '${{ secrets.DEV_FIREBASE_SA }}' > my_middle_API/secrets/secret_dev-s-locator-SA.json
          echo '${{ secrets.DEV_SECRETS_GMAP }}' > my_middle_API/secrets/secrets_gmap.json
          echo '${{ secrets.DEV_SECRETS_FIREBASE }}' > my_middle_API/secrets/secrets_firebase.json
          echo '${{ secrets.DEV_SECRET_DATABASE_ENV }}' > storage/secrets/secrets_database.env
          echo '${{ secrets.FRONTEND_ENV }}' > FrontEnd/.env
          echo '${{ secrets.DEV_GCLOUD_CONSOLE_SA }}' > my_middle_API/secrets/ggl_bucket_sa.json
          echo '${{ secrets.DEV_SECRET_STRIPE }}' > my_middle_API/secrets/secret_stripe.json
          echo '${{ secrets.DEV_SECRETS_LLM }}' > my_middle_API/secrets/secrets_llm.json

          echo "Secret files created."
          
          # Replace values in files
          sed -i 's|"REACT_APP_API_URL": "http://localhost:8000/fastapi"|"REACT_APP_API_URL": "http://37.27.195.216:8000/fastapi"|g' FrontEnd/src/urls.json
          sed -i 's|enable_CORS_url: str = "http://localhost:3000"|enable_CORS_url: str = "http://37.27.195.216:3000"|g' my_middle_API/config_factory.py
          sed -i 's|uvicorn.run(app, host="localhost", port=8000)|uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)|g' my_middle_API/run_apps.py
          echo "Configuration files updated."
         
          # Install jq
          apt-get update && apt-get install -y jq
          echo "jq installed."
          
          # For Backup
          touch /backup.sh
          cp ./backup.sh /backup.sh
          chmod 777 backup_setup.sh
          ./backup_setup.sh
          echo "Backup setup completed."
          
          # create docker network "myinternalnetwork" if doesn't already exist
          if ! docker network ls | grep -q myinternalnetwork; then
            docker network create myinternalnetwork
            echo "Docker network 'myinternalnetwork' created."
          else
            echo "Docker network 'myinternalnetwork' already exists."
          fi
          
          # clean up unused docker resources
          docker image prune -f
          docker container prune -f
          docker builder prune -f
          echo "Docker cleanup completed."


          # Build and run Docker containers
          docker compose build
          echo "Docker compose build completed."
          
          docker compose up -d
          echo "Docker compose up completed."

          echo "Deployment process finished."
